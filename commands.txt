help:
    prints this document of commands
        plans to add specific help, ie. help new would print only infomation regarding the new command
new <projectName> [*dependencies]:
    creates a new Fox project with an empty config.json file in the current working directory
    dependencies are loaded into the config file
        this can be left blank and modified manually
    default values:
        projectName: argument <projectName> passed on 'new'
        version: 0.0.1
        entry: main.py (enters your project at main.py, can be changed to whatever the entry point is)
    example: fox new my_new_project
run [*args]:
    runs the package with the entry defined in config.json
        default: main.py
        defined in the config file at lib.entry
    example: fox run your args here
build:
    builds the current package
        builds virtual environment (if missing)
        updates dependencies in virtual environment
entry <targetFile> [*flags]:
    sets where the package will initially run from (targetFile)
    without running this, the package will default to src/main.py
    takes additional flags:
        -no_src: sets the entry file verbatim. (sets it to yourEntryFile, not src/yourEntryFile)
add-depen [*dependencies]:
    adds each dependency to the package if it is not already in the dependency list
    duplicates will be ignored
drop-depen [*dependencies]:
    removes each dependency from the package
    if not found, it will be ignored. There is a currently a bug with this:
        if your virtual environment does not contain the specified module and it is in your config file's list of dependencies, it will not be removed from the config file.
        the easiest solution would be to manually delete the dependency from the config file.
set-args [*args]:
    sets the args for the package. arguments passed to run (see above) will take priority and be placed before this list.
    useful for programs where arguments do not change
clear-args:
    clears the package's arguments in the config file